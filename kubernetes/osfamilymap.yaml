# -*- coding: utf-8 -*-
# vim: ft=yaml
#
# Setup variables using grains['os_family'] based logic.
# You just need to add the key:values for an `os_family` that differ
# from `defaults.yaml`.
# Only add an `os_family` which is/will be supported by the formula
#
# If you do not need to provide defaults via the `os_family` grain,
# you will need to provide at least an empty dict in this file, e.g.
# osfamilymap: {}
---
{%- if grains.os == 'MacOS' %}
    {%- set macos_rootuser = salt['cmd.run']("stat -f '%Su' /dev/console") %}
    {%- set macos_rootgroup = salt['cmd.run']("stat -f '%Sg' /dev/console") %}
{%- endif %}

Debian:
  pkg:
    repo:
      name: deb https://apt.kubernetes.io/ kubernetes-xenial main
      file: /etc/apt/sources.list.d/kubernetes.list
      key_url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
  node:
    pkg:
      use_upstream: archive
  server:
    pkg:
      use_upstream: archive
  client:
    pkg:
      use_upstream: archive
  devtools:
    pkg:
      minikube:
        use_upstream: binary

RedHat:
  pkg:
    deps:
      - tar
      - gzip
         {%- if grains.os not in ('Amazon',) %}
      - container-selinux
         {%- endif %}
    deps_url:
      - https://rpm.rancher.io/k3s-selinux-0.1.1-rc1.el7.noarch.rpm
    repo:
      baseurl: 'https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64'
      gpgkey: 'https://packages.cloud.google.com/yum/doc/yum-key.gpg gpgkey2=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg'
      repo_gpgcheck: 1
  node:
    pkg:
      use_upstream: archive
  server:
    pkg:
      use_upstream: archive
  client:
    pkg:
      use_upstream: archive

Suse: {}
Gentoo: {}

Arch:
  pkg:
    deps:
      - tar
      - gzip
      - which
  linux:
    altpriority: 0

Alpine: {}

FreeBSD:
  identity:
    rootgroup: wheel
  client:
    pkg:
      use_upstream: false
  devtools:
    pkg:
      minikube:
        use_upstream: false

OpenBSD:
  identity:
    rootgroup: wheel
  client:
    pkg:
      use_upstream: false
  devtools:
    pkg:
      minikube:
        use_upstream: archive

Windows:
  div: '\'
  dir:
    base: C:\kubernetes\
    source: C:\kubernetes\src\libs\
    operators: C:\kubernetes\src\
    tmp: C:\temp\kubernetes\
  client:
    version: 1.19.0
    check: systeminfo
    aliases_file: C:\kubernetes\etc\aliases.sh
    pkg:
      name: kubernetes-cli         # choco
      suffix: ''
      use_upstream: package
      binary:
        source_hash: '6ec32a8a62b69363a524c4f8db765ff4bd16ea7e5b0eb04aa5a667f8653eda18c357a97513d9e12f0ba1612516acb150deffb6e3608633c62b97a15b6efa7cc0'
  node:
    version: 1.19.0
    config_file: C:\kubernetes\etc\node.ini
    pkg:
      use_upstream: archive
      archive:
        source_hash: '587651158c9999e64e06186ef2e65fe14d46ffdae28c5d8ee6261193bfe4967717f997ebe13857fa1893bbf492e1cc1f816bce86a94c6df9b7a0264848391397'  # noqa 204
  server:
    config_file: C:\kubernetes\etc\server.ini
    environ_file: C:\kubernetes\etc\server.sh
  sigs:
    pkg:
      kind:
        binary:
          source_hash: '6f34dbf6f6a9ebdd1d2a2b41a1d7b92d490a53569e45a791f7175c2b4143447f'
      krew:
        use_upstream: binary
        suffix: exe
        binary: {}
      kubebuilder:
        use_upstream: false  # no windows binary

  devtools:
    pkg:
      minikube:
        suffix: exe
        config_file: C:\kubernetes\etc\minikube.ini
        environ_file: C:\kubernetes\etc\minkube.sh
        binary:
          source_hash: 'a5f8666d762146cc7d85916bcb2d6b7246162e4706f10e5c12a795b9d07ea6c4'
      devspace:
        name: devspace
        suffix: exe
        binary:
          source_hash: 'a696bd3ae755222fd63884fa654ba91e24d46826bb78358fcba592fc2b4013c0'
      octant:
        suffix: zip
        archive:
          source_hash: 'd5f92218213299726f361a496dc9daf2a1c6b46f129ab929f87a70a9bd14ec20'
          options: ''
      k3s:
        use_upstream: false   # no windows binary
      kubectx:
        suffix: zip
        archive:
          source_hash: '50da8ffd2ac9ca7f41c8aa6bf47a7fbd91d17603827b24267b8618fc30e7923f'  # x86_64
          options: ''
      kubens:
        suffix: zip
        archive:
          source_hash: 'bd60e0bd71ef0c0d628dcf09600902e2d67998a29cc5998a404b200fe2d98de8'  # x86_64
          options: ''
      kudo:
        use_upstream: false  # windows not available
      istio:
        suffix: zip
        arch: ''  # noarch
        archive:
          options: ''
      cue:
        suffix: zip
        archive:
          source_hash: '820b581e7285b78644d4bcfd1a0bd2c9f2153ddc4880c501a7423ab7992dc778'  # x86_64
          options: ''
      audit2rbac:
        archive:
          source_hash: '57e1b6f108141da818eb29ad5755d386f56be067737302fabfa092e335c6ce57'
      stern:
        suffix: exe
        binary:
          source_hash: '75708b9acf6ef0eeffbe1f189402adc0405f1402e6b764f1f5152ca288e3109e'  # amd64
      dive:
        suffix: zip
        archive:
          source_hash: '4e8e48263077f94fccfb1f1c385a95640ef3c7a48fd8ca41cc7e5889ba82da28'  # amd64
          options: ''
      linkerd2:
        name: linkerd2-cli-edge
        suffix: exe

MacOS:
  dir:
    default: /etc/defaults/
  identity:
    rootuser: {{ macos_rootuser | d('') }}
    rootgroup: {{ macos_rootgroup | d('') }}
  server: {}
  client:
    aliases_file: /etc/defaults/kubernetes-aliases.sh
    pkg:
      name: kubernetes-cli         # homebrew
      use_upstream: archive
      binary:
        source_hash: '7b9bdc2dc8604e590052a58456ac648d3afd1b436e609118538a6ffe07579cc6'
      archive:
        source_hash: '803a0fed122ef6b85f7a120b5485723eaade765b7bc8306d0c0da03bd3df15d800699d15ea2270bb7797fa9ce6a81da90e730dc793ea4ed8c0149b63d26eca30'  # noqa 204

  sigs:
    pkg:
      kubebuilder:
        archive:
          source_hash: '39314d45053b6c31eb17e35c9b8d923f8a38277a9a136448345dd4b7f0f308f4'
      kind:
        name: kind      # homebrew
        binary:
          source_hash: '849034ffaea8a0e50f9153078890318d5863bafe01495418ea0ad037b518de90'

  devtools:
    pkg:
      minikube:
        check: sysctl -a | grep machdep.cpu.features
        name: minikube               # homebrew
        use_upstream: binary
        binary:
          source_hash: '7f6c6eeca19d6b16c9043cfc96a42408bbdec8ba90c01bd025249ca855a1362c'
      devspace:
        use_upstream: binary
        binary:
          source_hash: '92a8a50de12b06d5255aa2242dca77e879b7a63b1bcf214cd49e998831be9c1c'
      kudo:
        name: kudo-cli    # homebrew
        tapname: kudobuilder/tap
        binary:
          source_hash: 'df8ca9034ef78000638e9cb08e65c7f054938b4827368755b613a63a8ea8efc7'
      octant:
        suffix: zip
        archive:
          source_hash: 'f3ac074585bd3afbf529da7e37e5e8844150504fdb420f0cc930f31e766ce24a'
      linkerd2:
        binary:
          source_hash: '1adc9c53fe968383020b6c4047d42452754e05bc90d1a65f2261d729c6fab4df'
      k3s:
        use_upstream: binary
      kubectx:
        archive:
          source_hash: 'a46c5cf1f6ba8f6aa4dc75fc5a7086d294a28a19cf2fbbf18ac54108a7f713e1'  # x86_64
      kubens:
        archive:
          source_hash: '4ae390ba702d57355d5fb9f2bba04c9b00ae39f740c59044c2d39cd6bfa0ab18'  # x86_64
      cue:
        archive:
          source_hash: '659912f149bb1534c2e72baae31e3d4de108b292af3907f402d25fa101f80d98'  # x86_64
      stern:
        archive:
          source_hash: '7aea3b6691d47b3fb844dfc402905790665747c1e6c02c5cabdd41994533d7e9'  # x86_64
      dive:
        archive:
          source_hash: '1da3581355d432db38154d80ca9929fc3bca55c473ba286e7869814718f6d578'  # x86_64
      audit2rbac:
        archive:
          source_hash: 'e89d9e7e6e68d7fdf135ab0912f57afda0fea07931ac443a367d35671f83d1b1'
      skaffold:
        binary:
          source_hash: '271350426a34d8f3f0048c902e4d543ea994eca1a91cb881f8d7ebd9176de1a3'
