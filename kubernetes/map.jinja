# -*- coding: utf-8 -*-
# vim: ft=jinja

{%- set tplroot = tpldir.split('/')[0] %}
{%- import_yaml tplroot ~ "/defaults.yaml" as default_settings %}
{%- import_yaml tplroot ~ "/osfamilymap.yaml" as osfamilymap %}
{%- import_yaml tplroot ~ "/osfingermap.yaml" as osfingermap %}
{%- import_yaml tplroot ~ "/osmap.yaml" as osmap %}
{%- import_yaml tplroot ~ "/osarchmap.yaml" as osarchmap %}

{%- set _config = salt['config.get'](tplroot, default={}) %}
{%- set defaults = salt['grains.filter_by'](
      default_settings,
      default=tplroot,
      merge=salt['grains.filter_by']( osfamilymap, grain='os_family',
        merge=salt['grains.filter_by']( osmap, grain='os',
          merge=salt['grains.filter_by']( osfingermap, grain='osfinger',
            merge=salt['grains.filter_by']( osarchmap, grain='osarch',
              merge=salt['grains.filter_by']( _config, default='lookup'
              )
            )
          )
        )
      )
    )
 %}
{%- set d = salt['grains.filter_by']( {'defaults': defaults}, default='defaults', merge=_config) %}

{%- for comp in d.supported %}
    {%- if 'use_upstream_binary' in d[comp]['pkg'] and d[comp]['pkg']['use_upstream_binary'] %}
        {%- set dirname = comp + '-v%s'|format(d[comp]['version']) %}

        {%- if comp == 'kubectl' %}
            {%- set uri = '%s/v%s/bin/%s/%s'|format(d[comp]['pkg']['binary']['uri'], d[comp]['version'],
                                                    grains.kernel|lower, d.arch) %}
        {%- elif comp == 'minikube' %}
            {%- set uri = '%s/v%s/%s-%s-%s'|format(d[comp]['pkg']['binary']['uri'], d[comp]['version'],
                                                    comp, grains.kernel|lower, d.arch) %}
        {%- elif comp == 'devspace' %}
            {%- set uri = '%s/v%s/%s-%s-%s'|format(d[comp]['pkg']['binary']['uri'], d[comp]['version'],
                                                    comp, grains.kernel|lower, d.arch) %}
        {%- elif comp == 'kudo' %}
            {%- set uri = '%s/v%s/kubectl-%s_%s_%s_%s'|format(d[comp]['pkg']['binary']['uri'], d[comp]['version'],
                                                         comp, d[comp]['version'], grains.kernel|lower, d.arch) %}
        {%- elif comp == 'k3s' %}
            {%- set arch = '' if d.arch == 'amd64' else d.arch %}
            {%- set uri = '%s/v%s/%s-%s-%s'|format(d[comp]['pkg']['binary']['uri'], d[comp]['version'],
                                                    comp, grains.kernel|lower, arch) %}
        {%- endif %}

        {%- if 'source_hash' in d[comp]['pkg']['binary'] and d[comp]['pkg']['binary']['source_hash'] %}
            {%- do d[comp]['pkg']['binary'].update({'source_hash': d[comp]['pkg']['binary']['source_hash']}) %}
        {%- else %}
            {%- do d[comp]['pkg']['binary'].update({'source_hash': uri ~ '.sha256'}) %}
        {%- endif %}

        {%- do d[comp]['pkg']['binary'].update({
               'name':    d.dir.binary + '/' + dirname,
               'source':  uri if comp in ('minikube', 'devspace') else uri + '/' + d[comp]['pkg']['name']
        }) %}
    {%- endif %}
{%- endfor %}

{%- set data = d %}
